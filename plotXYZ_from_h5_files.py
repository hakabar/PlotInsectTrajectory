# -*- coding: utf-8 -*-
#Software developed by Diego Alonso San Alberto. The software is provided as it is.
#Script to Plot the X, Y and Z values over time from the H5.kalmanized file generated by Flydra.
import tables, sys
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import argparse

# Show all attributes names (columns) in the table obtained from the h5 file
def find_attr_name(kalmanTable):
	for elem in kalmanTable.colnames:
		print ('elem: %s'% elem)


# Fill the values from the kalman table to plot them
def get_position(kalmanTable):
	frameList= [x['frame'] for x in kalmanTable]
	xList= [x['x'] for x in kalmanTable]
	yList= [x['y'] for x in kalmanTable]
	zList= [x['z'] for x in kalmanTable]
	return frameList, xList, yList, zList


#Plot the x, y and z values in a 3D figure. The frame number (time) set the color of the graph
def plot_values(xList, yList, zList, frameList):
	fig = plt.figure()
	ax = fig.gca(projection='3d')
	#Configure the plot
	ax.scatter(xList,yList, zList, c= frameList)	#Allow to change the graph color in function of the time (frame number)
	ax.set_xlabel('X Values')
	ax.set_ylabel('Y Values')
	ax.set_zlabel('Z Values')
	#show the graph
	ax.plot(xList, yList, zList)	
	plt.show()
	
	
#Set the parameters to work with the h5 file.
#print(h5) will display the h5 file structure. Useful to know the attributes names
#(to obtain other datas, if required)
	
def settings():
	#Set arguments and their definition (help menu)
	parser= argparse.ArgumentParser(description="Script to Plot the X, Y and Z values over time from the H5.kalmanized file generated by Flydra.")
	parser.add_argument("-v", "--verbose", help="Shows debug information", action="store_true")
	parser.add_argument("-f", "--file", help="H5 file with kalmanized data" )
	args= parser.parse_args()
	
	if args.file:
		#h5 = tables.open_file('20180209_151800.mainbrain.kalmanized.h5',mode='r')
		print ("file to open: %s"%args.file)
		h5 = tables.open_file(args.file,mode='r')
	elif args.verbose:
		print("Working in debug mode")

	print(h5)	
	#table
	kalmanTable= h5.root.kalman_estimates
	find_attr_name(kalmanTable)
	return kalmanTable

	
# *** MAIN PROGRAM ***
if __name__ == "__main__":
	kalmanTable= settings()
	frameList, xList, yList, zList= get_position(kalmanTable)
	plot_values(xList, yList, zList, frameList)
